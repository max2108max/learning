Лексическая область видимости (это JS)  и Динамическая область видимости (Bash и другие)

где переменные и блоки области видимости были созданы вами во время написания 
и таким образом (в основном) навечно зафиксированы на момент, 
когда лексический анализатор обрабатывал ваш код.

(есть некоторые способы обмануть лексическую область действия)

function foo(str, a) {
	eval( str ); // обман!
	console.log( a, b );
}

var b = 2;

foo( "var b = 3;", 1 ); // 1, 3

НО ТАКЖЕ ЮЗАЕМ СТРИКТ ===============


function foo(str) {
   "use strict";
   eval( str );
   console.log( a ); // ReferenceError: a is not defined
}

foo( "var a = 2" );

ВСЕ ЧТО СОЗДАНО В EVAL ТАМ И ОСТАЕТЬСЯ ВНУТРИ EVAL 

мы не имеем доступа к переменной  - a (из вне eval)

Конструктор функции new Function(..) аналогично принимает строку кода в своем последнем аргументе, 
чтобы превратить ее в динамически сгенерированную функцию 
(первые аргументы, если указаны, являются именованными параметрами для новой функции). 
Такой синтаксис конструктора функции немного безопаснее, чем eval(..), но его также следует избегать в вашем коде.

WITH

оно является примером (формой) блочной области видимости, поскольку область видимости, 
которая создается из объекта, существует только в течение жизненного цикла этого оператора with,
а не окружающей области видимости.


Еще одна возможность в JavaScript, к которой неодобрительно относятся (и которая сейчас устарела!),
 которая обманывает лексическую область видимости, это ключевое слово  ===> with

 function foo(obj) {
	with (obj) {
		a = 2;
	}
}

var o1 = {
	a: 3
};

var o2 = {
	b: 3
};

foo( o1 );
console.log( o1.a ); // 2

foo( o2 );
console.log( o2.a ); // undefined
console.log( a ); // 2 — Упс, утекшая глобальная переменная! НЕНАЙДЕНА  a в o2 поэтому идем выше там ее нет и как LHS создаем ее там.

====================================================================================

function example() {
    var a = 10; // Переменная a в области видимости функции

    var obj = {
        a: 20,
        b: 30
    };

    with (obj) {
        var a = 40; // Это объявление не создаёт новую переменную в области with  (тоже что и  ====>  a = 40;)
        console.log(a); // Вывод: 40 (используется переменная из блока with)
    }

    console.log(a); // Вывод: 10 (используется переменная из области функции)
}

example();


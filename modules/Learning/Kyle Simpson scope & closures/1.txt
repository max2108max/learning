компиляция - 

1.Разбиение на лексемы
var a = 2;
var, a, =, 2 и ;

2. Парсинг
берет поток (массив) лексем и превращает его в дерево вложенных элементов
Это дерево называется "AST" (Abstract Syntax Tree, абстрактное синтаксическое дерево)

3.Генерация кода
процесс взятия AST и превращения его в исполняемый код



1. Движок отвечает за компиляцию от начала и до конца, а также за выполнение нашей JavaScript программы

2. Компилятор — один из друзей Движка, выполняет всю грязную работу по синтаксическому анализу и генерации кода

3. Область видимости -  собирает и обслуживает список поиска всех объявленных идентификаторов (переменных) 
                        и следит за исполнением строгого набора правил относительно того, 
                         каким образом эти идентификаторы доступны для текущего выполняемого кода.


var a = 2 ======> Компилятор вместо этого сделает следующее:

Компилятор попросит Область видимости проверить, существует ли уже переменная a в коллекции указанной области видимости.

Если да, то Компилятор проигнорирует это объявление переменной и двинется дальше.

В противном случае, Компилятор попросит Область видимости объявить новую переменную a в коллекции указанной области видимости.

Затем Компилятор сгенерирует код для Движка.

чтобы обработать присваивание a = 2. Код, который Движок запускает,
сначала спросит Область видимости есть ли переменная с именем a, доступная в коллекции текущей области видимости.
Если есть, то Движок будет использовать эту переменную. 
Если нет, то Движок будет искать в другом месте (Вложенная область видимости ).

В нашем случае говорят, что Движок будет выполнять "LHS"-поиск переменной a. Другой тип поиска называется "RHS".

Эти термины означают "Left-hand Side" (левая сторона) и "Right-hand Side" (правая сторона).

LHS-поиск выполняется, когда переменная появляется с левой стороны операции присваивания,

а RHS-поиск выполняется, когда переменная появляется с правой стороны операции присваивания.
RHS-поиск, для наших целей, неотличим от простого поиска значения некоторой переменной.

function foo(a) {
	console.log( a ); //  МЫ ИЩЕМ КТО ЭТО - кто источник присваивания (RHS)
}

foo( 2 ); //кто является целью присваивания (LHS) ====> а = 2


function foo(a) {
	var b = a;
	return a + b;
}

var c = foo( 2 );

Определите все LHS-поиски (их 3!).

c = .., a = 2 (неявное присваивание параметру) и b = ..

Определите все RHS-поиски (их 4!).

foo(2..,  //1
= a ,     //2
 a + ..   //3
 .. + b   //4


Область видимости — это набор правил, которые определяют где и как переменная (идентификатор) могут быть найдены.
Невыполненные RHS-ссылки приводят к выбросу ReferenceError. 
Невыполненные LHS-ссылки приводят к автоматической, неявно созданной переменной с таким именем (если не включен "Строгий режим"),
либо к ReferenceError (если включен "Строгий режим").
Объекты создаются двумя способами: декларативно (литерально) и с помощью конструктора.

              var myObj = {
              key: value
              // ...              
};
 --------------------------------
              var myObj = new Object();
              myObj.key = value;

Встроенные Объекты


String
Number
Boolean
Object
Function
Array
Date
RegExp
Error

в JS это, на самом деле, встроенные функции (могут быть использованы с new)

Дублирование Объектов--------------------------------------------------

1.  var newObj = JSON.parse( JSON.stringify( someObj ) );

2.  var newObj = Object.assign( {}, myObject );
    newObj.a;	                    // 2
    newObj.b === anotherObject;	    // true
    newObj.c === anotherArray;	    // true
    newObj.d === anotherFunction;	// true

любые особенные характеристики свойств (вроде writable) исходного объекта не сохраняются в целевом объекте.

Дескрипторы свойств---------------------------------------------------------------------

var myObject = {
    a: 2
};
Object.getOwnPropertyDescriptor( myObject, "a" );
// {
// value: 2,
// writable: true,
// enumerable: true,
// configurable: true
// }


           Object.defineProperty(..) 
для добавления нового или изменения существующего свойства
только если configurable: true

изменение configurable на false необратимо и его нельзя отменить.
configurable:false препятствует возможности использовать оператор delete для удаления существующего свойства.

myImmutableObject.foo; // [1,2,3]
myImmutableObject.foo.push( 4 ); // внутри обьекта все муттабельно если это не исправить!!!
myImmutableObject.foo; // [1,2,3,4]


КОНСТАНТА ОБЬЕКТА------------------------------------------------------------------

var myObject = {};
Object.defineProperty( myObject, "FAVORITE_NUMBER", {
    value: 42,
    writable: false,
    configurable: false
} );

Запрет расширения---------------------------------------------------------------

var myObject = {
    a: 2
};
Object.preventExtensions( myObject );
myObject.b = 3;
myObject.b; // undefined


Object.seal(..) создает «запечатанный» объект
применяет к нему Object.preventExtensions(..)
+ все существующие свойства как configurable:false.

Object.freeze(..)
применяет Object.seal(..)
+все свойства «доступа к данным» как writable:false
-----------------------------------------------------------------------------------------

hasOwnProperty(..) наоборот проверяет есть ли свойство только у объекта myObject
 или нет и не опрашивает цепочку [[Prototype]]

 Оператор in проверит находится ли свойство в объекте или существует ли оно уровнем выше в цепочке [[Prototype]]

 propertyIsEnumerable(..)

 Object.keys(..) возвращает массив всех перечисляемых свойств
 Object.getOwnPropertyNames(..) возвращает массив всех свойств -- перечисляемых или нет.

 every(..) пока функция не вернёт false
 some(..)  пока функция не вернёт  true
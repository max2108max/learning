this. 
Это специальное ключевое слово идентификатор,
которое автоматически определяется внутри области видимости каждой функции,
this привязывается не во время написания функции, а во время её вызова.

function foo() {
	foo.count = 4; // `foo` ссылается на саму себя
}

setTimeout( function(){
	// анонимная функция (без имени), не может
	// ссылаться на себя
}, 10 );


     -------->arguments.callee<--------- 
для указания неименованной функции на саму себя 


============================================================

function foo(num) {
	console.log( "foo: " + num );

	// Отслеживаем сколько раз `foo` была вызвана
	this.count++;
}

foo.count = 0;

var i;

for (i=0; i<10; i++) {
	if (i > 5) {
		foo( i )   // используя `call(..)` мы гарантируем что `this`
		           // ссылается на объект функции (`foo`) изнутри 
                   //foo.call(foo,i)
	}
}
// foo: 6
// foo: 7
// foo: 8
// foo: 9

// Сколько раз была вызвана `foo`?
console.log( foo.count ); // 0 -- WTF?


======================================================
 Не всякий мост возможен. Вы не можете использовать ссылку this, чтобы найти что-нибудь в области видимости.
 Это невозможно.

 function foo() {
	var a = 2;
	this.bar();
}

function bar() {
	console.log( this.a );
}



foo(); //undefined
Привязка по умолчанию---------------------------------------------------
правило, действующее по умолчанию когда остальные правила не применяются.

function foo() {
	console.log( this.a );
}

var a = 2;

foo(); // 2


===========================================

function foo() {
	"use strict";

	console.log( this.a );
}

var a = 2;

foo(); // TypeError: `this` is `undefined`

Состояние strict mode в точке вызова foo() не имеет значения.
главное есть ли strict =====> ВНУТРИ foo() <=========



Неявная привязка-------------------------------------------------------

function foo() {
	console.log( this.a );
}

var obj = {
	a: 2,
	foo: foo
};

obj.foo(); // 2 this.a — синоним obj.a

======================================

function foo() {
	console.log( this.a );
}

var obj2 = {
	a: 42,
	foo: foo
};

var obj1 = {
	a: 2,
	obj2: obj2
};

obj1.obj2.foo(); // 42 this - будет obj2.foo

Неявно потерянный--------------------------------------------------

когда вызов ==> obj.foo()

function foo() {
	console.log( this.a );
}

var obj = {
	a: 2,
	foo: foo
};

var a = "ой, глобальная"; // `a` еще и переменная в глобальном объекте

setTimeout( obj.foo, 100 ); // "ой, глобальная"

Явная привязка--------------------------------------------------
 